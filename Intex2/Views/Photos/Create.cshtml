@model Intex2.Models.Photo
@using Amazon.S3; 
@using System;
@using System.IO;
@using Amazon.S3.Model;
@using System.Threading;
@using System.Threading.Tasks;
@using Amazon.Runtime;
@using Amazon.Auth; 
@using Amazon.Runtime.CredentialManagement; 

@{
    ViewData["Title"] = "Create";
    string bucketName = "elasticbeanstalk-us-east-1-503379183917/Photos";
    string profileName = "[default]";
    string AWSAccessKey = "ASIAXKM54ZEW2MFOK5WL";
    string AWSSecretKey = "3mxTtn90lxTy7+QyA2e3m+2dGOe8dxdM1U/T2tXy";
    string AWSToken = "aws_session_token=IQoJb3JpZ2luX2VjEDoaCXVzLXdlc3QtMiJHMEUCIQDd8ED4xuxLFeJyYy4yQd+uteMQo5t/Welzvp6WAY4K1QIgS8vrQaQbzSY7Z6G2BuXr4tonGBQaa9Qs4PaYmh3IGA0qtAIIk///////////ARAAGgw1MDMzNzkxODM5MTciDMcfpfn1r2kZ4s6oPSqIAouFtfgetQi+PDY6BaUxgfV5mWmv+okqv7K5TBjTeC1Bi7EasDGO6fufzbHI5J9xWdmcpPBHU7f6LMoEf9OBVI84MW2m3dS628GiEJDRVF774TnMkfJLROSHKQkMeP86LyunIQPEBlYXb6wakiAZXQdvY8Pz6d34fTB04ZjYOBe5ueYmfDHabtzaiOoNNf6ssbLI23W3jF1+CxxkZzLu6QqLqpIsNR0oYIG2+1c4Xufz/IDnuKf4disUGeeGwuOOIdkYlVHWIhLbDgFEJJLcW6qkdFgLwbhP54gfem0wcNzdHTKT/GKVNTpEingK/axva2R4KpSWmkD+pnBMJaTfOGlDQCXRPoSSejChxMeDBjqdAYe0SZhg2TMdEmamAOCIyd0Oc25TI7n1HspXLsFiRUhnyNORJY175xGro1cJN/Q7H2MHF9IFEuRTgYGsQkhN1FKLy3FXtQamPx6/sBAdqhAiE+SbZy73vuNtfm0fVJoVIWu/KIDQvngZbrWUxFGnlZVtEhTM0UlCW5swu7vz4tl+Sz1hCvP4CWtvaSDp0k1Oz3jVDvnKaaDsgR1RJBQ=";

    SessionAWSCredentials tempcredentials = new SessionAWSCredentials(AWSAccessKey, AWSSecretKey, AWSToken);


    FileInfo file = new FileInfo(@"C:/Users/Jeffrey/Downloads/IMG_0431.JPG");
    string path = "Photos/testing_IMG_0431.JPG";

    var options = new CredentialProfileOptions
    {
        AccessKey = AWSAccessKey,
        SecretKey = AWSSecretKey,
        Token = AWSToken
    };

    SessionAWSCredentials creds = new SessionAWSCredentials(AWSAccessKey, AWSSecretKey, AWSToken);
    

    IAmazonS3 client = new AmazonS3Client(creds, Amazon.RegionEndpoint.USEast1);


    Amazon.S3.Model.PutObjectRequest request = new Amazon.S3.Model.PutObjectRequest()
    {
        InputStream = file.OpenRead(),
        BucketName = bucketName,
        Key = path
    };

    CancellationTokenSource source = new CancellationTokenSource();
    CancellationToken token = source.Token;


    PutObjectResponse response = client.PutObjectAsync(request, token).Result;
}

<h1>Create</h1>

<h4>Photo</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="BurialId" class="control-label"></label>
                <select asp-for="BurialId" class ="form-control" asp-items="ViewBag.BurialId"></select>
            </div>
            <div class="form-group">
                <label asp-for="PhotoId" class="control-label"></label>
                <input asp-for="PhotoId" class="form-control" />
                <span asp-validation-for="PhotoId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
